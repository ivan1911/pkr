from poker_data import *
import itertools


class Two:
    """
    Next 3 lookups are for Zach's pre-flop eval
    TODO: Remove these tables since we precalcuate the percentiles
    """
    preflop_order_matrix = [
        [87,169,168,166,167,165,159,149,135,121,105,86,59],
        [163,66,164,161,162,160,157,144,131,116,98,80,53],
        [158,150,48,153,154,151,148,140,125,111,93,74,49],
        [155,146,136,27,145,141,137,130,122,107,89,69,41],
        [156,147,138,128,17,133,127,120,112,102,81,62,42],
        [152,143,134,124,115,9,117,109,101,92,77,58,36],
        [142,139,129,119,110,100,7,99,91,79,68,51,32],
        [132,126,123,113,103,94,83,6,78,70,56,40,25],
        [118,114,108,106,96,84,73,64,5,57,47,33,19],
        [104,97,95,90,85,75,65,55,45,4,39,26,15],
        [88,82,76,72,67,61,52,43,34,28,3,23,14],
        [71,63,60,54,50,44,37,29,22,20,16,2,12],
        [46,38,35,30,31,24,21,18,13,11,10,8,1]
    ]
    # This matrix represents the preflop counts of given card combinations
    # The first value here is the count of AA (there are 3 different pocket
    # rockets :)) whereas the last value is the count of 32 offsuit
    preflop_count_matrix = [
        3,3,3,3,3,3,3,2,3,2,2,6,2,6,6,2,3,2,6,2,
        2,2,6,2,6,6,3,2,2,2,2,6,6,2,2,6,2,2,6,6,
        6,6,2,2,2,2,6,3,6,2,6,2,6,2,2,6,6,6,6,2,
        2,6,2,2,2,3,2,6,6,6,2,2,2,6,2,2,6,6,6,6,
        6,2,2,2,2,6,3,2,6,2,6,6,6,2,2,2,2,6,6,2,
        6,6,2,2,6,2,6,2,6,2,6,6,2,2,2,6,6,2,2,6,
        6,6,2,2,6,2,6,2,2,6,6,2,6,2,6,2,6,2,2,6,
        6,2,2,6,6,2,2,6,6,2,6,2,6,6,2,2,6,2,6,6,
        6,6,2,6,6,6,6,6,6
    ]
    preflop_count_sum = 663.0

    suited_ranks_to_percentile = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0.05731523378582204, 0.096530920060331815, 0.11161387631975872, 0.10859728506787325, 0.13273001508295623, 0.19306184012066363, 0.25339366515837103, 0.33785822021116141, 0.42232277526395179, 0.51885369532428349, 0.61387631975867274, 0.76470588235294112, 0],
        [0, 0, 0, 0, 0.14479638009049778, 0.16892911010558065, 0.16591251885369529, 0.19004524886877827, 0.21417797888386125, 0.28959276018099545, 0.36199095022624439, 0.46757164404223228, 0.54449472096530926, 0.65761689291101055, 0.81297134238310709, 0],
        [0, 0, 0, 0, 0, 0.22926093514328805, 0.21719457013574661, 0.24132730015082959, 0.27450980392156865, 0.30467571644042235, 0.39819004524886881, 0.473604826546003, 0.59276018099547512, 0.67269984917043746, 0.82805429864253388, 0],
        [0, 0, 0, 0, 0, 0, 0.27752639517345401, 0.30165912518853699, 0.33484162895927605, 0.36500754147812975, 0.41025641025641024, 0.50678733031674206, 0.61085972850678738, 0.71493212669683259, 0.85520361990950222, 0],
        [0, 0, 0, 0, 0, 0, 0, 0.35897435897435892, 0.38612368024132726, 0.42533936651583715, 0.47058823529411764, 0.53544494720965308, 0.64404223227752633, 0.73906485671191557, 0.85218702865761686, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0.44645550527903466, 0.47662141779788836, 0.53846153846153844, 0.59577677224736048, 0.6696832579185521, 0.77073906485671195, 0.8868778280542986, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.54147812971342391, 0.60784313725490202, 0.65158371040723984, 0.72699849170437414, 0.81598793363499245, 0.90196078431372551, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.65460030165912519, 0.71191553544494723, 0.77375565610859731, 0.85822021116138769, 0.9170437405731523, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.76772247360482648, 0.83107088989441924, 0.89894419306184015, 0.94570135746606332, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.86123680241327305, 0.90497737556561086, 0.95776772247360487, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.92458521870286581, 0.96078431372549022, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.96832579185520362, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
    unsuited_ranks_to_percentile = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0.52337858220211153, 0.0090497737556560764, 0.018099547511312264, 0.036199095022624417, 0.02714932126696834, 0.045248868778280493, 0.093514328808446456, 0.15384615384615385, 0.23831070889894423, 0.3227752639517345, 0.41930618401206632, 0.53242835595776772, 0.68174962292609353, 0],
        [0, 0, 0.0090497737556560764, 0.64856711915535448, 0.054298642533936681, 0.075414781297134192, 0.066365007541478116, 0.08446455505279038, 0.10558069381598789, 0.18702865761689291, 0.26244343891402711, 0.35595776772247356, 0.46455505279034692, 0.56259426847662142, 0.72398190045248867, 0],
        [0, 0, 0.018099547511312264, 0.054298642533936681, 0.75263951734539969, 0.12971342383107087, 0.1206636500754148, 0.14177978883861242, 0.16289592760180993, 0.21116138763197589, 0.29864253393665163, 0.3831070889894419, 0.48567119155354455, 0.60482654600301666, 0.74811463046757165, 0],
        [0, 0, 0.036199095022624417, 0.075414781297134192, 0.12971342383107087, 0.86576168929110109, 0.17797888386123684, 0.20211161387631971, 0.22624434389140269, 0.27149321266968329, 0.31372549019607843, 0.40723981900452488, 0.51583710407239813, 0.63197586726998489, 0.79185520361990946, 0],
        [0, 0, 0.02714932126696834, 0.066365007541478116, 0.1206636500754148, 0.17797888386123684, 0.92156862745098045, 0.25037707390648567, 0.28657616892911009, 0.33182503770739069, 0.37405731523378583, 0.43438914027149322, 0.55354449472096534, 0.66666666666666674, 0.78280542986425339, 0],
        [0, 0, 0.045248868778280493, 0.08446455505279038, 0.14177978883861242, 0.20211161387631971, 0.25037707390648567, 0.96530920060331826, 0.34690799396681749, 0.39517345399698345, 0.4434389140271493, 0.49472096530920062, 0.58974358974358976, 0.69079939668174961, 0.82503770739064852, 0],
        [0, 0, 0.093514328808446456, 0.10558069381598789, 0.16289592760180993, 0.22624434389140269, 0.28657616892911009, 0.34690799396681749, 0.97285067873303166, 0.45550527903469085, 0.5037707390648567, 0.57164404223227749, 0.64102564102564097, 0.73604826546003022, 0.8491704374057315, 0],
        [0, 0, 0.15384615384615385, 0.18702865761689291, 0.21116138763197589, 0.27149321266968329, 0.33182503770739069, 0.39517345399698345, 0.45550527903469085, 0.9773755656108597, 0.58069381598793357, 0.62292609351432882, 0.70889894419306176, 0.80090497737556565, 0.88386123680241324, 0],
        [0, 0, 0.23831070889894423, 0.26244343891402711, 0.29864253393665163, 0.31372549019607843, 0.37405731523378583, 0.4434389140271493, 0.5037707390648567, 0.58069381598793357, 0.98190045248868774, 0.69984917043740569, 0.76168929110105577, 0.84012066365007543, 0.91402714932126694, 0],
        [0, 0, 0.3227752639517345, 0.35595776772247356, 0.3831070889894419, 0.40723981900452488, 0.43438914027149322, 0.49472096530920062, 0.57164404223227749, 0.62292609351432882, 0.69984917043740569, 0.98642533936651589, 0.80995475113122173, 0.87481146304675717, 0.93363499245852188, 0],
        [0, 0, 0.41930618401206632, 0.46455505279034692, 0.48567119155354455, 0.51583710407239813, 0.55354449472096534, 0.58974358974358976, 0.64102564102564097, 0.70889894419306176, 0.76168929110105577, 0.80995475113122173, 0.99095022624434392, 0.89592760180995479, 0.94268476621417796, 0],
        [0, 0, 0.53242835595776772, 0.56259426847662142, 0.60482654600301666, 0.63197586726998489, 0.66666666666666674, 0.69079939668174961, 0.73604826546003022, 0.80090497737556565, 0.84012066365007543, 0.87481146304675717, 0.89592760180995479, 0.99547511312217196, 0.95475113122171951, 0],
        [0, 0, 0.68174962292609353, 0.72398190045248867, 0.74811463046757165, 0.79185520361990946, 0.78280542986425339, 0.82503770739064852, 0.8491704374057315, 0.88386123680241324, 0.91402714932126694, 0.93363499245852188, 0.94268476621417796, 0.95475113122171951, 1.0, 0]
    ]

    relative_order_matrix = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 11],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 6, 1]
    ]

    @staticmethod
    def chen_power_rank(hand):
        """Power rank algorithm by Bill Chen"""

        # Highest Card
        # Based on the highest card, assign points as follows: Ace = 10 points,
        # K = 8 points, Q = 7 points, J = 6 points. 10 through 2, half of face
        # value (10 = 5 points, 9 = 4.5 points, etc.)
        points = 0
        if hand[0].rank == 14:
            points = 10
        elif hand[0].rank == 13:
            points = 8
        elif hand[0].rank == 12:
            points = 7
        elif hand[0].rank == 11:
            points = 6
        else:
            points = hand[0].rank / 2

        # Pairs
        # For pairs, multiply the points by 2 (AA 20, KK = 16, etc.), with a
        # minimum of 5 points for any pair. 55 is given an extra point (=6).
        if hand[0].rank == hand[1].rank:
            points *= 2
            if hand[0].rank == 5:
                points = 6
            elif points < 5:
                points = 5
        else:
            # Suited
            # Add 2 points for suited cards.
            if hand[0].suit == hand[1].suit:
                points += 2

            # Closeness
            #
            # Subtract 1 point for 1 gappers (AQ, J9) 2 points for 2 gappers
            # (J8, AJ). 4 points for 3 gappers (J7, 73). 5 points for larger
            # gappers, including A2 A3 A4
            # Add an extra point if connected or 1-gap and your highest card is
            # lower than Q (since you then can make all higher straights)
            if hand[0].rank == 14 and hand[1].rank in [2, 3, 4]:
                points -= 5
            else:
                gap = hand[0].rank - hand[1].rank - 1
                if gap in [1, 2]:
                    points -= gap
                elif gap == 3:
                    points -= 4
                else:
                    points -= 5

                if gap == 0 or gap == 1 and hand[0].rank < 12:
                    points += 1

        return points

    @staticmethod
    def relative_rank(hand):
        return 1

    @staticmethod
    def evaluate_rank(hand):
        hand = sorted(hand, key=lambda a: a.rank)
        if hand[0].suit == hand[1].suit:
            return (
                Two.preflop_order_matrix[hand[1].rank - 2][hand[0].rank - 2]
            )
        else:
            return (
                Two.preflop_order_matrix[hand[0].rank - 2][hand[1].rank - 2]
            )

    @staticmethod
    def evaluate_percentile(hand):
        """
        Using lookup table, return percentile of your hand with two cards
        """
        if hand[0].suit == hand[1].suit:
            return (
                Two.suited_ranks_to_percentile
                [hand[1].rank][hand[0].rank]
            )
        else:
            return Two.unsuited_ranks_to_percentile[hand[0].rank][hand[1].rank]


_SUITS = [1 << (i + 12) for i in range(4)]
_RANKS = [(1 << (i + 16)) | (i << 8) for i in range(13)]
_PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]
_DECK = [
    _RANKS[rank] | _SUITS[suit] | _PRIMES[rank] for rank, suit in
    itertools.product(range(13), range(4))
]

SUITS = 'cdhs'
RANKS = '23456789TJQKA'
DECK = [''.join(s) for s in itertools.product(RANKS, SUITS)]
LOOKUP = dict(zip(DECK, _DECK))


def hash_function(x):
    x += 0xe91aaa35
    x ^= x >> 16
    x += x << 8
    x &= 0xffffffff
    x ^= x >> 4
    b = (x >> 8) & 0x1ff
    a = (x + (x << 2)) >> 19
    r = (a ^ HASH_ADJUST[b]) & 0x1fff
    return HASH_VALUES[r]


def eval5(hand):
    c1, c2, c3, c4, c5 = (LOOKUP[x] for x in hand)
    q = (c1 | c2 | c3 | c4 | c5) >> 16
    if (0xf000 & c1 & c2 & c3 & c4 & c5):
        return FLUSHES[q]
    s = UNIQUE_5[q]
    if s:
        return s
    p = (c1 & 0xff) * (c2 & 0xff) * (c3 & 0xff) * (c4 & 0xff) * (c5 & 0xff)
    return hash_function(p)


def eval6(hand):
    return min(eval5(x) for x in itertools.combinations(hand, 5))


def eval7(hand):
    return min(eval5(x) for x in itertools.combinations(hand, 5))
